/*
  Copyright (c) 2011-2012 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2011-2012 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
  THIS FILE IS GENERATED by
  scripts/gen-esa-bottomup.rb
  --key rdjce
  --reader
  --absolute
  --no_process_lcpinterval.
  DO NOT EDIT.
*/

#include <limits.h>
#include "core/ma.h"
#include "esa-seqread.h"
/* no include for seqnumrelpos.h */

static void initBUinfo_rdjce(GtBUinfo_rdjce *,GtBUstate_rdjce *);

static void freeBUinfo_rdjce(GtBUinfo_rdjce *,GtBUstate_rdjce *);

static int processleafedge_rdjce(bool,
    GtUword,
    GtBUinfo_rdjce *,
    GtUword, /* position */
    GtBUstate_rdjce *,
    GtError *err);

static int processbranchingedge_rdjce(bool firstsucc,
    GtUword,
    GtBUinfo_rdjce *,
    GtUword,
    GtUword,
    GtBUinfo_rdjce *,
    GtBUstate_rdjce *,
    GtError *);

/* no declaration of processlcpinterval_rdjce */

#define TOP_ESA_BOTTOMUP_rdjce\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo-1]

#define POP_ESA_BOTTOMUP_rdjce\
        (stack->spaceGtBUItvinfo + (--stack->nextfreeGtBUItvinfo))

#define PUSH_ESA_BOTTOMUP_rdjce(LCP,LB)\
        if (stack->nextfreeGtBUItvinfo >= stack->allocatedGtBUItvinfo)\
        {\
          gt_assert(stack->nextfreeGtBUItvinfo ==\
                    stack->allocatedGtBUItvinfo);\
          stack->spaceGtBUItvinfo\
            = allocateBUstack_rdjce(stack->spaceGtBUItvinfo,\
                              stack->allocatedGtBUItvinfo,\
                              stack->allocatedGtBUItvinfo+incrementstacksize,\
                              bustate);\
          stack->allocatedGtBUItvinfo += incrementstacksize;\
        }\
        gt_assert(stack->spaceGtBUItvinfo != NULL);\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo].lcp = LCP;\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo].lb = LB;\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo++].rb = ULONG_MAX

typedef struct
{
  GtUword lcp, lb, rb;
  GtBUinfo_rdjce info;
} GtBUItvinfo_rdjce;

typedef struct
{
  GtBUItvinfo_rdjce *spaceGtBUItvinfo;
  GtUword allocatedGtBUItvinfo,
                nextfreeGtBUItvinfo;
} GtArrayGtBUItvinfo_rdjce;

GtArrayGtBUItvinfo_rdjce *gt_GtArrayGtBUItvinfo_new_rdjce(void)
{
  GtArrayGtBUItvinfo_rdjce *stack = gt_malloc(sizeof (*stack));

  stack->spaceGtBUItvinfo = NULL;
  stack->allocatedGtBUItvinfo = stack->nextfreeGtBUItvinfo = 0;
  return stack;
}

void gt_GtArrayGtBUItvinfo_delete_rdjce(GtArrayGtBUItvinfo_rdjce *stack,
                                  GtBUstate_rdjce *state)
{
  GtUword idx;

  for (idx=0; idx<stack->allocatedGtBUItvinfo; idx++)
  {
    freeBUinfo_rdjce(&stack->spaceGtBUItvinfo[idx].info,state);
  }
  gt_free(stack->spaceGtBUItvinfo);
  gt_free(stack);
}

static GtBUItvinfo_rdjce *allocateBUstack_rdjce(GtBUItvinfo_rdjce *ptr,
                                   GtUword currentallocated,
                                   GtUword allocated,
                                   GtBUstate_rdjce *state)
{
  GtUword idx;
  GtBUItvinfo_rdjce *itvinfo;

  itvinfo = gt_realloc(ptr,sizeof (*itvinfo) * allocated);
  gt_assert(allocated > currentallocated);
  for (idx=currentallocated; idx<allocated; idx++)
  {
    initBUinfo_rdjce(&itvinfo[idx].info,state);
  }
  gt_assert(itvinfo != NULL);
  return itvinfo;
}

static int gt_esa_bottomup_rdjce(Sequentialsuffixarrayreader *ssar,
                    GtBUstate_rdjce *bustate,
                    /* no parameter snrp */
                    GtError *err)
{
  const GtUword incrementstacksize = 32UL;
  GtUword lcpvalue,
                previoussuffix = 0,
                idx,
                numberofsuffixes,
                lastsuftabvalue = 0;
  GtBUItvinfo_rdjce *lastinterval = NULL;
  bool haserr = false, firstedge, firstedgefromroot = true;
  GtArrayGtBUItvinfo_rdjce *stack;

  stack = gt_GtArrayGtBUItvinfo_new_rdjce();
  PUSH_ESA_BOTTOMUP_rdjce(0,0);
  numberofsuffixes = gt_Sequentialsuffixarrayreader_nonspecials(ssar);
  for (idx = 0; !haserr && idx < numberofsuffixes; idx++)
  {
    NEXTSEQUENTIALLCPTABVALUEWITHLAST(lcpvalue,lastsuftabvalue,ssar);
    NEXTSEQUENTIALSUFTABVALUE(previoussuffix,ssar);
    gt_assert(stack->nextfreeGtBUItvinfo > 0);
    if (lcpvalue <= TOP_ESA_BOTTOMUP_rdjce.lcp)
    {
      if (TOP_ESA_BOTTOMUP_rdjce.lcp > 0 || !firstedgefromroot)
      {
        firstedge = false;
      } else
      {
        firstedge = true;
        firstedgefromroot = false;
      }
      if (processleafedge_rdjce(firstedge,
                          TOP_ESA_BOTTOMUP_rdjce.lcp,
                          &TOP_ESA_BOTTOMUP_rdjce.info,
                          previoussuffix,
                          bustate,
                          err) != 0)
      {
        haserr = true;
      }
    }
    gt_assert(lastinterval == NULL);
    while (!haserr && lcpvalue < TOP_ESA_BOTTOMUP_rdjce.lcp)
    {
      lastinterval = POP_ESA_BOTTOMUP_rdjce;
      lastinterval->rb = idx;
      /* no call to processlcpinterval_rdjce */
      if (lcpvalue <= TOP_ESA_BOTTOMUP_rdjce.lcp)
      {
        if (TOP_ESA_BOTTOMUP_rdjce.lcp > 0 || !firstedgefromroot)
        {
          firstedge = false;
        } else
        {
          firstedge = true;
          firstedgefromroot = false;
        }
        if (processbranchingedge_rdjce(firstedge,
               TOP_ESA_BOTTOMUP_rdjce.lcp,
               &TOP_ESA_BOTTOMUP_rdjce.info,
               lastinterval->lcp,
               lastinterval->rb - lastinterval->lb + 1,
               &lastinterval->info,
               bustate,
               err) != 0)
        {
          haserr = true;
        }
        lastinterval = NULL;
      }
    }
    if (!haserr && lcpvalue > TOP_ESA_BOTTOMUP_rdjce.lcp)
    {
      if (lastinterval != NULL)
      {
        GtUword lastintervallb = lastinterval->lb;
        GtUword lastintervallcp = lastinterval->lcp,
              lastintervalrb = lastinterval->rb;
        PUSH_ESA_BOTTOMUP_rdjce(lcpvalue,lastintervallb);
        if (processbranchingedge_rdjce(true,
                       TOP_ESA_BOTTOMUP_rdjce.lcp,
                       &TOP_ESA_BOTTOMUP_rdjce.info,
                       lastintervallcp,
                       lastintervalrb - lastintervallb + 1,
                       NULL,
                       bustate,
                       err) != 0)
        {
          haserr = true;
        }
        lastinterval = NULL;
      } else
      {
        PUSH_ESA_BOTTOMUP_rdjce(lcpvalue,idx);
        if (processleafedge_rdjce(true,
                            TOP_ESA_BOTTOMUP_rdjce.lcp,
                            &TOP_ESA_BOTTOMUP_rdjce.info,
                            previoussuffix,
                            bustate,
                            err) != 0)
        {
          haserr = true;
        }
      }
    }
  }
  gt_assert(stack->nextfreeGtBUItvinfo > 0);
  if (!haserr && TOP_ESA_BOTTOMUP_rdjce.lcp > 0)
  {
    /* no assignment to lastsuftabvalue */
    if (processleafedge_rdjce(false,
                        TOP_ESA_BOTTOMUP_rdjce.lcp,
                        &TOP_ESA_BOTTOMUP_rdjce.info,
                        lastsuftabvalue,
                        bustate,
                        err) != 0)
    {
      haserr = true;
    } else
    {
      TOP_ESA_BOTTOMUP_rdjce.rb = idx;
      /* no call to processlcpinterval_rdjce */
    }
  }
  gt_GtArrayGtBUItvinfo_delete_rdjce(stack,bustate);
  return haserr ? -1 : 0;
}
